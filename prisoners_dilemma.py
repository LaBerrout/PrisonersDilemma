# -*- coding: utf-8 -*-
"""2023-Berrout-Laura-Assignment-4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XRY4px6OmY_XsBjkKkUJ-AmBRrN2kiZt

I'm in team with Salvador Ruiz on the Project about the Prisoner's Dilemma.
While base of the code is the same, we made the Assingment separately.
"""

pip install pyibl

import pyibl
from pyibl import Agent
import random
import pandas as _hex_pandas
import matplotlib.pyplot as plt
import numpy as np

# 2 players - 2 agents
# Options for the 2 players
# Outcomes              |    Prisoner 2 Defects   | Prisoner 2 Cooperates
# Player 1 Defects      |         (-1,-1)         |        (10,-10)
# Player 1 Cooperates   |         (-10,10)        |        (1,1)

# Get outcomes for each choice for each prisoners
def Outcome(choice1, choice2):
  if choice1 == 'Cooperate':
    # Prisoner 1 and 2 cooperate
    if choice2 == 'Cooperate':
      outcome = [1,1]
    # Prisoner 1 cooperates, but 2 defects
    else:
      outcome = [-10,10]
  else:
    # Prisoner 1 defects, but 2 cooperates
    if choice2 == 'Cooperate':
      outcome = [10,-10]
    # Prisoner 1 and 2 defects
    else:
      outcome = [-1,-1]
  return outcome

print("Outcome:", Outcome("Cooperate", "Defect"))

a = Agent(name="Prisoner 1", default_utility_populates=True)
b = Agent(name="Prisoner 2", default_utility_populates=True)

# Prisoner's 1 attributes
a.default_utility = 5
a.decay = 0.5
a.noise = 0.25
a.trace = False

# Prisoner's 2 attributtes
b.default_utility = 5
b.decay = 0.5
b.noise = 0.25
b.trace = False

num_pa_cooperates = 0
num_pb_cooperates = 0

options = ['Cooperate', 'Defect']

rounds = 30   # Get the choices of both prisoners for x rounds
players = 10  # 20 participants in total, 10 for prisoner 1, and 10 prisoner 2

# Save the results of all the plays
all_trials =[None]*players
outcome = [0]*len(options)
all_outcomes = [None]*players
all_num_cooperate = [None]*players
all_prob_cooperate = [None]*players
probA = []
probB = []

# Get the decision of all participants
for p in range(players):
  a.reset()
  b.reset()
  for i in range(rounds):
    # Get the choice of each participant
    choice_a = a.choose(options)
    choice_b = b.choose(options)

    # Count if they cooperate
    if choice_a == "Cooperate":
      num_pa_cooperates += 1
    if choice_b == "Cooperate":
      num_pb_cooperates += 1

    # Save the outcome of the round
    outcome = Outcome(choice_a, choice_b)
    a.respond(outcome[0])
    b.respond(outcome[1])

  # Save all the outcomes in an array and reset for next round
  all_trials[p] = outcome
  outcome = [0]*len(options)

  # Save all the times the participants cooperated
  all_num_cooperate[p] = [num_pa_cooperates, num_pb_cooperates]
  num_pa_cooperates = 0
  num_pb_cooperates = 0


print("All plays:")
for n in range(len(all_trials)):
    print(all_trials[n])

print("\nNum of cooperation:")
for n in range(len(all_num_cooperate)):
    print(all_num_cooperate[n])

# Probability of cooperating
for n in range(players):
  for i in range(len(all_num_cooperate[n])):
    all_prob_cooperate[n] = [(a/rounds)*100 for a in all_num_cooperate[n]]

print("\nProbability of cooperation:")
for n in range(len(all_num_cooperate)):
    print(all_prob_cooperate[n])

for n in range(len(all_prob_cooperate)):
    probA.append(all_prob_cooperate[n][0])
    probB.append(all_prob_cooperate[n][1])


print("\nPrisoner 1 instances (last instance):")
a.instances()
print("\nPrisoner 2 instances (last instance):")
b.instances()

# Plot the probabilities of cooperation for all
fig, ax = plt.subplots(figsize=(10,6))

plt.plot(range(len(probA)), probA, marker='o', color = 'blue')
plt.plot(range(len(probB)), probB, marker='o', color = 'green')
plt.show
plt.xlabel("Rounds")
plt.ylabel("Probabilities")
plt.title('Probilities of Prisoner 1 and 2 Cooperates')
plt.grid()

# Show the x and y axis at the origin
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')